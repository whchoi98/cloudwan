##us-west-2##
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters:
         - AvailabilityZoneA
         - AvailabilityZoneB
         - VPCCIDRBlock
         - PublicSubnetABlock
         - PublicSubnetBBlock
         - PrivateSubnetABlock
         - PrivateSubnetBBlock
         - CloudWANSubnetABlock
         - CloudWANSubnetBBlock
         - InstanceType
         - InstanceTypeLarge

################################################################################################
# Create-Parameters : AZ,VPC CIDR Blcok, Public, Private Subnet Block, InstanceType Parameters #
################################################################################################

Parameters:
  AvailabilityZoneA:
    Description: "Choose AZ1 for your VPC."
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "us-west-2a"
  AvailabilityZoneB:
    Description: "Choose AZ2 for your VPC."
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "us-west-2b"

  VPCCIDRBlock:
    Type: String
    Default: 10.132.0.0/16
    Description: "The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range."

  PublicSubnetABlock:
    Type: String
    Default: 10.132.11.0/24
    Description: "CidrBlock for AZ A public subnet A within the VPC"

  PublicSubnetBBlock:
    Type: String
    Default: 10.132.12.0/24
    Description: "CidrBlock for AZ B public subnet B within the VPC" 

  PrivateSubnetABlock:
    Type: String
    Default: 10.132.21.0/24
    Description: "CidrBlock for AZ A private subnet A within the VPC"

  PrivateSubnetBBlock:
    Type: String
    Default: 10.132.22.0/24
    Description: "CidrBlock for AZ B private subnet B within the VPC"
 
  CloudWANSubnetABlock:
    Type: String
    Default: 10.132.251.0/24
    Description: "CidrBlock for AZ A TGW subnet A within the VPC"

  CloudWANSubnetBBlock:
    Type: String
    Default: 10.132.252.0/24
    Description: "CidrBlock for AZ B TGW subnet B within the VPC"

  InstanceType:
    Type: String
    Default: "m5.xlarge"
    Description: EC2 Instance Type for the VPC.
  
  InstanceTypeLarge:
    Type: String
    Default: m5.4xlarge
    Description: EC2 Large Instance Type for the VPC.    

################################
# Create-Keypair : EC2 Keypair #
################################

  KeyPair:
    Description: "Keypair to access the EC2 Instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: "mykey"

##########################
# Create-AMI: EC2 AMI ID #
##########################

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

###############################
# Create-Resource: Resource   #
###############################

Resources:

#####################
# Create-VPC : VPC #
#####################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
        - Key: project
          Value: !Sub '${AWS::StackName}'

###########################################
# Create-IGW: Create VPC InternetGateway #
###########################################

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

#############################################
# Create-NATGW: Create VPC NATGateway #
#############################################
  NatgatewayAEIP:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NATGW-A-EIP'

  NatgatewayA:
    DependsOn:
    - NatgatewayAEIP
    - PublicSubnetA
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatgatewayAEIP.AllocationId'
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NATGW-A'
 
####################################################
# Create-Public-Subnet: VPC Public_Subnet_a,b #
####################################################

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnetA'

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnetB'


################################################
# Create-RouteTable: VPCPublic Route Table    #
################################################

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRT'

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

######################################################################################################
# Associate-Publice-RouteTable: VPC Public Subnet a,b Accsociate VPC Public Subnet Route Table #
######################################################################################################
  PublicSubnetRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnetRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicSubnetRouteTable


#############################################################
# Create-Private-Subnet: Create VPC Private_Subnet_a,b #
#############################################################

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetA'

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetB'

#####################################################################
# Create-Private-RouteTable: Create VPC_Private_RouteTable_a,b #
#####################################################################
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Subnet-A-RT'

  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Subnet-B-RT'

  PrivateSubnetARoute:
    DependsOn:
    - VPCGatewayAttachment
    - NatgatewayA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatgatewayA

  PrivateSubnetBRoute:
    DependsOn:
    - VPCGatewayAttachment
    - NatgatewayA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatgatewayA


################################################################################################
# Associate-Private-RouteTable: VPC_Private_Subnet_a,b Accsociate VPC_Private_RouteTable #
################################################################################################
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA   
      RouteTableId: !Ref PrivateSubnetARouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateSubnetBRouteTable

#############################################################
# CreateCloudWANSubnet: Create VPC TGW_Subnet_a,b #
#############################################################

  CloudWANSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CloudWANSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-CloudWANSubnetA'

  CloudWANSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CloudWANSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-CloudWANSubnetB'

#####################################################################
# CreateCloudWANRouteTable: Create VPC_CloudWAN_RouteTable_a,b #
#####################################################################
  CloudWANSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}CloudWANSubnet-A-RT'

  CloudWANSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}CloudWANSubnet-B-RT'

 
  CloudWANSubnetARoute:
    DependsOn:
    - VPCGatewayAttachment
    - NatgatewayA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref CloudWANSubnetARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatgatewayA

  CloudWANSubnetBRoute:
    DependsOn:
    - VPCGatewayAttachment
    - NatgatewayA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref CloudWANSubnetBRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatgatewayA
      
      
################################################################################################
# AssociateCloudWANRouteTable: VPC_CloudWAN_Subnet_a,b Accsociate VPC_CloudWAN_RouteTable #
################################################################################################
  CloudWANSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CloudWANSubnetA   
      RouteTableId: !Ref CloudWANSubnetARouteTable

  CloudWANSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CloudWANSubnetB
      RouteTableId: !Ref CloudWANSubnetBRouteTable

 
######################################
# Create-SSM: Create VPC ServerRole #
######################################

  ServerRoleSSM:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-SSMRole'
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  InstanceProfileSSM:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: 
        - Ref: ServerRoleSSM


###############################################################################
# Create-Security-Group: VPC Security Group - HTTP, HTTPS, ICMP , SSH Permit #
###############################################################################

  PublicEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for ICMP and SSH,HTTP/S from All network
      GroupName:  PublicEC2SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: "-1"
          ToPort: "-1"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "22"
          ToPort: "22"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "49153"
          ToPort: "49153"
        - IpProtocol: udp
          CidrIp: 0.0.0.0/0
          FromPort: "49152"
          ToPort: "49153"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "80"
          ToPort: "80"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "443"
          ToPort: "443"
        - IpProtocol: 'tcp'
          CidrIp: 0.0.0.0/0
          FromPort: "10050"
          ToPort: "10051"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSG'

  PrivateEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for ICMP and SSH,HTTP/S from All network
      GroupName: PrivateEC2SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: "-1"
          ToPort: "-1"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "22"
          ToPort: "22"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "80"
          ToPort: "80"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "443"
          ToPort: "443"
        - IpProtocol: 'tcp'
          CidrIp: 0.0.0.0/0
          FromPort: "10050"
          ToPort: "10051"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSG'


  SSMSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for HTTP/S from All network
      GroupName: SSMSG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "80"
          ToPort: "80"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "443"
          ToPort: "443"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SSMSG'

  PublicAInstance1:
    Type: AWS::EC2::Instance
    DependsOn: PublicSubnetA
    Properties:
      SubnetId: !Ref PublicSubnetA
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.132.11.101
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PublicEC2SG
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 10
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-10.132.11.101'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update
            sudo yum -y install yum-utils 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion 
            sudo yum -y install httpd php mysql php-mysql 
            sudo yum -y install python-pip
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp
            sudo systemctl start httpd
            sudo systemctl enable httpd
            cd /var/www/html/
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git
            sudo systemctl restart httpd
            cd /home/ec2-user/
            sudo git clone https://github.com/whchoi98/cloudwan.git
            cd /home/ec2-user/cloudwan/
            sudo -s
            cat hostfile >> /etc/hosts
            chmode 755 ./bluepingshell.sh
            chmode 755 ./greenpingshell.sh
            exit

  PublicAInstance2:
    Type: AWS::EC2::Instance
    DependsOn: PublicSubnetA
    Properties:
      SubnetId: !Ref PublicSubnetA
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.132.11.102
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PublicEC2SG
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 10
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-10.132.11.102'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update
            sudo yum -y install yum-utils 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion 
            sudo yum -y install httpd php mysql php-mysql 
            sudo yum -y install python-pip
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp
            sudo systemctl start httpd
            sudo systemctl enable httpd
            cd /var/www/html/
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git
            sudo systemctl restart httpd
            cd /home/ec2-user/
            sudo git clone https://github.com/whchoi98/cloudwan.git
            cd /home/ec2-user/cloudwan/
            sudo -s
            cat hostfile >> /etc/hosts
            chmode 755 ./bluepingshell.sh
            chmode 755 ./greenpingshell.sh
            exit       

  PublicBInstance1:
    Type: AWS::EC2::Instance
    DependsOn: PublicSubnetB
    Properties:
      SubnetId: !Ref PublicSubnetB
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.132.12.101
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PublicEC2SG
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 10
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-10.132.12.101'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update
            sudo yum -y install yum-utils 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion 
            sudo yum -y install httpd php mysql php-mysql 
            sudo yum -y install python-pip
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp nc
            sudo systemctl start httpd
            sudo systemctl enable httpd
            cd /var/www/html/
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git
            sudo systemctl restart httpd
            cd /home/ec2-user/
            sudo git clone https://github.com/whchoi98/cloudwan.git
            cd /home/ec2-user/cloudwan/
            sudo -s
            cat hostfile >> /etc/hosts
            chmode 755 ./bluepingshell.sh
            chmode 755 ./greenpingshell.sh
            exit 

  PublicBInstance2:
    Type: AWS::EC2::Instance
    DependsOn: PublicSubnetB
    Properties:
      SubnetId: !Ref PublicSubnetB
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.132.12.102
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PublicEC2SG
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 10
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-10.132.12.102'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update
            sudo yum -y install yum-utils 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion 
            sudo yum -y install httpd php mysql php-mysql 
            sudo yum -y install python-pip
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp nc
            sudo systemctl start httpd
            sudo systemctl enable httpd
            cd /var/www/html/
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git
            sudo systemctl restart httpd
            cd /home/ec2-user/
            sudo git clone https://github.com/whchoi98/cloudwan.git
            cd /home/ec2-user/cloudwan/
            sudo -s
            cat hostfile >> /etc/hosts
            chmode 755 ./bluepingshell.sh
            chmode 755 ./greenpingshell.sh
            exit


##############################################
# Create-Private-EC2: VPC Private EC2 Create #
##############################################

  PrivateAInstanace1:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetA
    Properties:
      SubnetId: !Ref PrivateSubnetA
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.132.21.101
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PrivateEC2SG
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-10.132.21.101'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update
            sudo yum -y install yum-utils 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion 
            sudo yum -y install httpd php mysql php-mysql 
            sudo yum -y install python-pip
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp nc
            sudo systemctl start httpd
            sudo systemctl enable httpd
            cd /var/www/html/
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git
            sudo systemctl restart httpd
            cd /home/ec2-user/
            sudo git clone https://github.com/whchoi98/cloudwan.git
            cd /home/ec2-user/cloudwan/
            sudo -s
            cat hostfile >> /etc/hosts
            chmode 755 ./bluepingshell.sh
            chmode 755 ./greenpingshell.sh
            exit       

  PrivateAInstance2:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetA
    Properties:
      SubnetId: !Ref PrivateSubnetA
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.132.21.102
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PrivateEC2SG
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-10.132.21.102'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update
            sudo yum -y install yum-utils 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion 
            sudo yum -y install httpd php mysql php-mysql 
            sudo yum -y install python-pip
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp nc
            sudo systemctl start httpd
            sudo systemctl enable httpd
            cd /var/www/html/
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git
            sudo systemctl restart httpd
            cd /home/ec2-user/
            sudo git clone https://github.com/whchoi98/cloudwan.git
            cd /home/ec2-user/cloudwan/
            sudo -s
            cat hostfile >> /etc/hosts
            chmode 755 ./bluepingshell.sh
            chmode 755 ./greenpingshell.sh
            exit       

  PrivateBInstance1:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetB
    Properties:
      SubnetId: !Ref PrivateSubnetB
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.132.22.101
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PrivateEC2SG
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-10.132.22.101'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update
            sudo yum -y install yum-utils 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion 
            sudo yum -y install httpd php mysql php-mysql 
            sudo yum -y install python-pip
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp nc
            sudo systemctl start httpd
            sudo systemctl enable httpd
            cd /var/www/html/
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git
            sudo systemctl restart httpd
            cd /home/ec2-user/
            sudo git clone https://github.com/whchoi98/cloudwan.git
            cd /home/ec2-user/cloudwan/
            sudo -s
            cat hostfile >> /etc/hosts
            chmode 755 ./bluepingshell.sh
            chmode 755 ./greenpingshell.sh
            exit

  PrivateBInstance2:
    Type: AWS::EC2::Instance
    DependsOn: PrivateSubnetB
    Properties:
      SubnetId: !Ref PrivateSubnetB
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.132.22.102
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: PrivateEC2SG
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-10.132.22.102'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update
            sudo yum -y install yum-utils 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion 
            sudo yum -y install httpd php mysql php-mysql 
            sudo yum -y install python-pip
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp nc
            sudo systemctl start httpd
            sudo systemctl enable httpd
            cd /var/www/html/
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git
            sudo systemctl restart httpd
            cd /home/ec2-user/
            sudo git clone https://github.com/whchoi98/cloudwan.git
            cd /home/ec2-user/cloudwan/
            sudo -s
            cat hostfile >> /etc/hosts
            chmode 755 ./bluepingshell.sh
            chmode 755 ./greenpingshell.sh
            exit


######################################################################
# Create-System-Manager-Endpoint: Create VPC SystemManager Endpoint #
######################################################################

  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds: 
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: SSMSG

  SSMMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds: 
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: SSMSG


###############
# VPC Outputs #
###############
Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}"

  CloudWANSubnetA:
    Description: CloudWANSubnetA
    Value: !Ref CloudWANSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-CloudWANSubnetA"

  CloudWANSubnetB:
    Description: CloudWANSubnetB
    Value: !Ref CloudWANSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-CloudWANSubnetB"

  PublicSubnetA:
    Description: PublicSubnetA
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetA"

  PublicSubnetBBlock:
    Description: PublicSubnetB
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetB"

  PrivateSubnetABlock:
    Description: PrivateSubnetA
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetA"

  PrivateSubnetBBlock:
    Description: PrivateSubnetB
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetB"

  PublicSubnetRouteTable:
    Description: PublicSubnetRouteTableID
    Value: !Ref PublicSubnetRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetRouteTable"

  PrivateSubnetARouteTable:
    Description: PrivateSubnetARouteTableID
    Value: !Ref PrivateSubnetARouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetARouteTableID"

  PrivateSubnetBRouteTable:
    Description: PrivateSubnetBRouteTableID
    Value: !Ref PrivateSubnetBRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetBRouteTableID"

  CloudWANSubnetARouteTable:
    Description: CloudWANSubnetARouteTableID
    Value: !Ref CloudWANSubnetARouteTable
    Export:
      Name: !Sub "${AWS::StackName}-CloudWANSubnetARouteTableID"

  CloudWANSubnetBRouteTable:
    Description: CloudWANSubnetBRouteTableID
    Value: !Ref CloudWANSubnetBRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-CloudWANSubnetBRouteTableID"
